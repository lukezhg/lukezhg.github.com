<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: computer | Chunlei's Blog]]></title>
  <link href="http://zhangchunlei.com/blog/categories/computer/atom.xml" rel="self"/>
  <link href="http://zhangchunlei.com/"/>
  <updated>2017-12-30T23:12:20+08:00</updated>
  <id>http://zhangchunlei.com/</id>
  <author>
    <name><![CDATA[chunlei]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[mysql charset admin django]]></title>
    <link href="http://zhangchunlei.com/blog/2017/12/30/mysql-charset-admin-django/"/>
    <updated>2017-12-30T22:37:00+08:00</updated>
    <id>http://zhangchunlei.com/blog/2017/12/30/mysql-charset-admin-django</id>
    <content type="html"><![CDATA[<p>中文乱码永远是程序猿的痛！！</p>

<p>今天使用django-admin就遇到了乱码问题，是仿照<a href="https://djangobook.com/adding-models-to-django-admin/">django book</a>的model用法，做一个资源管理平台出现的问题。</p>

<p>代码提示：mysql不能正确处理中文字符，于是一路google找到几个可能的解决措施：</p>

<p>1、修改admin.py</p>

<pre><code>import sys;   
reload(sys);  
sys.setdefaultencoding("utf8") 
</code></pre>

<p>这个办法曾经帮助我解决了chatbot项目的乱码问题。</p>

<p>2、修改mysql的配置文件/etc/my.cnf<br/>
方案一：</p>

<pre><code>[mysqld]
character-set-server=utf8 
[client]
default-character-set=utf8 
[mysql]
default-character-set=utf8
</code></pre>

<p>方案二：utf8mb4兼容utf8，且比utf8能表示更多的字符，是utf8字符集的超集。所以现在一些新的业务，比如ISO等，会将MySQL数据库的字符集设置为utf8mb4。</p>

<pre><code>[client]  
default-character-set=utf8mb4  

[mysqld]  
character-set-server = utf8mb4  
collation-server = utf8mb4_unicode_ci  
init_connect='SET NAMES utf8mb4'  
skip-character-set-client-handshake = true  

[mysql]  
default-character-set = utf8mb4  
</code></pre>

<p>3、关键还是要会使用命令诊断问题所在。<br/>
我的问题出在新建的数据库中表单变量的字符码设置不是utf8，后来把数据库drop掉，重新配置my.cnf文件，然后重建mysql数据库就没问题了。</p>

<p>4、常用的mysql命令和django命令。</p>

<pre><code>mysql -u db_user -p
SHOW DATABASES;
CREATE DATABASE blog_data;
drop database mydb;
SHOW DATABASES;
</code></pre>

<p>CTRL + D退出mysql。</p>

<p>通过show variables 命令查看字符编码，发现部分变量的编码果然不是utf8，难怪乱码。</p>

<pre><code>show variables like '%char%’;
</code></pre>

<p>尝试重制响应的字符编码设置。</p>

<pre><code>set character_set_server=utf8;
set character_set_database=utf8;
show variables like '%char%’;
</code></pre>

<p>结果无效，于是进一步查看响应的数据库及其表单：</p>

<pre><code>use my_db;
show tables;
show full columns from table1; ／／这条命令可以看到table1中的变量情况，发现果然编码有问题。 
</code></pre>

<p>尝试修改这个表单中的变量设置,也就是my_db.table1表单中的my_var变量字符编码。</p>

<pre><code>ALTER TABLE my_db.table1 MODIFY COLUMN my_var VARCHAR(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL;
</code></pre>

<p>错误代码位置发生了改变，这说明改动有效，于是重新建立数据库（见3）。</p>

<p>5、Django的一些命令。</p>

<pre><code>python manage.py createsuperuser #生成admin登陆的超级用户和密码
python manage.py makemigrations #当更改model时，通过此命令把变动反应到数据库中
python manage.py migrate
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Swf send data to Java Script]]></title>
    <link href="http://zhangchunlei.com/blog/2017/12/29/swf-send-data-to-java-script/"/>
    <updated>2017-12-29T19:21:00+08:00</updated>
    <id>http://zhangchunlei.com/blog/2017/12/29/swf-send-data-to-java-script</id>
    <content type="html"><![CDATA[<p>Flash制作动画非常便捷，但是如何能够把用swf文件收集的数据发送給JS处理呢？下面是一个简单的例子：<br/>
1、首先在html网页中通过object嵌入swf文件</p>

<pre><code>&lt;body&gt;
&lt;object type="application/x-shockwave-flash" data="{% static "flash/test.swf" %}"  name="test" width="550" height="400"&gt;
&lt;param name="allowScriptAccess" value="sameDomain" /&gt; 
&lt;param name="movie" value="{% static "flash/test.swf" %}" /&gt;
&lt;/object&gt;
&lt;/body&gt;
</code></pre>

<p>2、在网页的头部嵌入要调用的函数hello</p>

<pre><code>&lt;script&gt;
    function hello(v){ 
        alert("hello: "+v);
        document.location.href = '/search';
    } 
    function thisMovie(movieName) { 
        if (navigator.appName.indexOf("Microsoft") != -1) { 
            return window[movieName] 
        } 
        else { 
            return document[movieName] 
        } 
    }
&lt;/script&gt;
</code></pre>

<p>3、编辑fla文件，建立一个文本框txt1和一个提交submit按钮</p>

<pre><code>package {
import flash.net.*;
import flash.events.Event;
import flash.events.MouseEvent;
import flash.display.MovieClip;
import flash.external.ExternalInterface; 
public class test extends MovieClip {
    public function test(): void {
        submit.addEventListener(MouseEvent.CLICK, postForm);
    }
    private function postForm(evt: MouseEvent): void {
        ExternalInterface.call("hello", txt1.text); 
    }
}
</code></pre>

<p>4、实现的效果如下：<br/>
当你点击submit按钮时，swf文件会将txt1.text传递給hello函数，并且通过JS现实对话框“欢迎： 某某” 并且跳转到／search页面。</p>

<p>5、原理解释<br/>
fla文件中，导入了flash.external.ExternalInterface类，它是专门负责外部通信的。通过ExternalInterface.call方法，就可以调用object容器外部的函数hello。</p>

<p>6、JS调用AS函数的实现方法。<br/>
上面实现了AS调用JS并传递参数，那么反过来，JS是否可以调用AS函数呢？答案是肯定的。</p>

<p>AS类这样写：</p>

<pre><code>package {
    import flash.net.*;
    import flash.events.Event;
    import flash.events.MouseEvent;
    import flash.display.MovieClip;
    import flash.external.ExternalInterface;

    public class test extends MovieClip {
        public function test(): void {
            submit.addEventListener(MouseEvent.CLICK, postForm);
            ExternalInterface.addCallback("say", say); //regist 
        }

        private function say(txt: String) {
            txt2.text = txt;
        }

        private function postForm(evt: MouseEvent): void {
            //call js function
            ExternalInterface.call("hello", txt1.text);
        }
    }
}
</code></pre>

<p>Html这样写：</p>

<pre><code>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
    &lt;title&gt;As communicate with JS&lt;/title&gt;
    &lt;script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"&gt;&lt;/script&gt;
    &lt;script&gt;
        function hello(v){ 
            alert("hello: "+v);
            //document.location.href = '/search';
        }
        function thisMovie(movieName) { 
            if (navigator.appName.indexOf("Microsoft") != -1) { 
                return window[movieName] 
            } 
            else { 
                return document[movieName] 
            } 
        }
        $(document).ready(function(){
            $("#btn1").click(function(){
                $("#test1").text("Hello world!");
            });
            $("#btn2").click(function(){
                $("#test2").html("&lt;b&gt;Hello world!&lt;/b&gt;");
            });
            $("#btn3").click(function(){
                //$("#test3").val("Dolly Duck");
                var txt=$("#test3").val();
                thisMovie("test").say(txt);
            });
        });
    &lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;object type="application/x-shockwave-flash" data="{% static "flash/test.swf" %}"  name="test" width="550" height="400"&gt;
    &lt;param name="allowScriptAccess" value="sameDomain" /&gt; 
    &lt;param name="movie" value="{% static "flash/test.swf" %}" /&gt;
    &lt;embed src="{% static "flash/test.swf" %}" name="test" quality="high" allowScriptAccess="always" swLiveConnect="true" type="application/x-shockwave-flash" width="550" height="400"&gt;&lt;/embed&gt;
    &lt;/object&gt;
    &lt;br&gt;
    &lt;p id="test1"&gt;This is a paragraph.&lt;/p&gt;
    &lt;p id="test2"&gt;This is another paragraph.&lt;/p&gt;
    &lt;p&gt;Input field: &lt;input type="text" id="test3" value="Mickey Mouse"&gt;&lt;/p&gt;
    &lt;button id="btn1"&gt;Set Text&lt;/button&gt;
    &lt;button id="btn2"&gt;Set HTML&lt;/button&gt;
    &lt;button id="btn3"&gt;Set Value&lt;/button&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>7、遗留的问题：这样的写法谷歌浏览器没问题，但是火狐浏览器不成功，也就是不能把参数传到swf上。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AJAX and Chatbot]]></title>
    <link href="http://zhangchunlei.com/blog/2017/12/15/ajax-and-chatbot/"/>
    <updated>2017-12-15T20:14:00+08:00</updated>
    <id>http://zhangchunlei.com/blog/2017/12/15/ajax-and-chatbot</id>
    <content type="html"><![CDATA[<p>AJAX是一个缩写，代表：Asynchronous JavaScript And XML.</p>

<pre><code>AJAX is a developer's dream, because you can:
# Read data from a web server - after the page has loaded
# Update a web page without reloading the page
# Send data to a web server - in the background
</code></pre>

<p>今天改写了一个代码实现了聊天的过程中不需要重新加载页面。代码如下：</p>

<p>urls.py</p>

<pre><code>url(r'^api/chat/', post), 
</code></pre>

<p>view.py</p>

<pre><code>def post(request, *args, **kwargs):
    """
    Return a response to the statement in the posted data.
    """
    bot = ChatBot("Training Example")
    bot.set_trainer(ListTrainer)
    input_data = json.loads(request.read().decode('utf-8'))
    response = bot.get_response(input_data)
    response_data = response.serialize()
    return JsonResponse(response_data, status=200)
</code></pre>

<p>chat.html</p>

<pre><code>&lt;script&gt;
  var chatterbotUrl = '/api/chat/';
  var csrftoken = Cookies.get('csrftoken');
  function csrfSafeMethod(method) {
    // these HTTP methods do not require CSRF protection
    return (/^(GET|HEAD|OPTIONS|TRACE)$/.test(method));
  }

  $.ajaxSetup({
    beforeSend: function(xhr, settings) {
      if (!csrfSafeMethod(settings.type) &amp;&amp; !this.crossDomain) {
        xhr.setRequestHeader("X-CSRFToken", csrftoken);
      }
    }
  });

  var $input = $('#input');
  var $sayButton = $('#sayButton');
  var $answer = $('#answer');

  function submitInput() {
    var inputData = {
      'text': $input.val()
    }
    var $submit = $.ajax({
      type: 'POST',
      url: chatterbotUrl,
      data: JSON.stringify(inputData),
      contentType: 'application/json'
    });

    $submit.done(function(statement) {
        $answer.val(statement.text);
        // Clear the input field
        $input.val('');
        //alert(statement.text)
    });

  $sayButton.click(function() {
    submitInput();
  });
</code></pre>

<p>原理是这样的，首先你需要通过urls.py文件指定在请求特定url的时候，触发的函数。这个函数是在view.py中定义的，也就是post函数。post函数需要至少一个参数，也就是request，request必须包含一个text的属性才能被read()出来而不出错。之后，post函数会返回一个JsonResponse，其中机器人的回答可以通过statement.text来获取和使用，见chat.html中的$submit.done函数。</p>

<p>当不知道传递的是何值时，可以通过html 中的alert或者python中的print（）来监听调试。</p>
]]></content>
  </entry>
  
</feed>
