<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[tags: Python | Chunlei's Blog]]></title>
  <link href="http://zhangchunlei.com/tag/python/atom.xml" rel="self"/>
  <link href="http://zhangchunlei.com/"/>
  <updated>2013-09-17T12:31:05-04:00</updated>
  <id>http://zhangchunlei.com/</id>
  <author>
    <name><![CDATA[chunlei]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Python简明手册]]></title>
    <link href="http://zhangchunlei.com/blog/2013/07/30/python-brief/"/>
    <updated>2013-07-30T14:25:00-04:00</updated>
    <id>http://zhangchunlei.com/blog/2013/07/30/python-brief</id>
    <content type="html"><![CDATA[<p>Python重要用法示例</p>

<blockquote><blockquote><blockquote><p>dir(list)
显示关键字相关的函数</p>

<p>help(list.reverse)
查询某个函数的功能</p></blockquote></blockquote></blockquote>

<p>set 让一个list变成无重复元素的set
例如：</p>

<blockquote><blockquote><blockquote><p>shapes = ['circle','square','triangle','circle']
setOfShapes = set(shapes)
setOfShapes
set(['circle','square','triangle'])
setOfShapes.add('polygon')
'rhombus' in setOfShapes
False
setOfShapes - setOfFavoriteShapes
setOfShapes &amp; setOfFavoriteShapes
setOfShapes | setOfFavoriteShapes</p></blockquote></blockquote></blockquote>

<p>map和lambda</p>

<blockquote><blockquote><blockquote><p>map(lambda x: x * x, [1,2,3])
[1, 4, 9]
filter(lambda x: x > 3, [1,2,3,4,5,4,3,2,1])
[4, 5, 4]</p></blockquote></blockquote></blockquote>

<p>Object 先定义一个类，然后给类生成实例
定义如：
class FruitShop:</p>

<pre><code>def __init__(self, name, fruitPrices):
    """
        name: Name of the fruit shop

        fruitPrices: Dictionary with keys as fruit 
        strings and prices for values e.g. 
        {'apples':2.00, 'oranges': 1.50, 'pears': 1.75} 
    """
    self.fruitPrices = fruitPrices
    self.name = name
    print 'Welcome to the %s fruit shop' % (name)

def getCostPerPound(self, fruit):
    """
        fruit: Fruit string
    Returns cost of 'fruit', assuming 'fruit'
    is in our inventory or None otherwise
    """
    if fruit not in self.fruitPrices:
        print "Sorry we don't have %s" % (fruit)
        return None
    return self.fruitPrices[fruit]

def getPriceOfOrder(self, orderList):
    """
        orderList: List of (fruit, numPounds) tuples

    Returns cost of orderList. If any of the fruit are  
    """ 
    totalCost = 0.0             
    for fruit, numPounds in orderList:
        costPerPound = self.getCostPerPound(fruit)
        if costPerPound != None:
            totalCost += numPounds * costPerPound
    return totalCost

def getName(self):
    return self.name
</code></pre>
]]></content>
  </entry>
  
</feed>
